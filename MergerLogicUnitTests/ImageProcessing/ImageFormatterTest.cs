using MergerLogic.Batching;
using MergerLogic.DataTypes;
using MergerLogic.ImageProcessing;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;

namespace MergerLogicUnitTests.ImageProcessing
{
    [TestClass]
    [TestCategory("unit")]
    [TestCategory("imageProcessing")]
    public class ImageFormatterTest
    {

        #region mocks

        private ImageFormatter _testImageFormatter;

        #endregion

        [TestInitialize]
        public void BeforeEach()
        {
            this._testImageFormatter = new ImageFormatter();
        }

        #region ConvertToFormat

        public static IEnumerable<object[]> GetConvertToFormatTestParameters()
        {
            yield return new object[] {
                "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDACAWGBwYFCAcGhwkIiAmMFA0MCwsMGJGSjpQdGZ6eHJmcG6AkLicgIiuim5woNqirr7EztDOfJri8uDI8LjKzsb/2wBDASIkJDAqMF40NF7GhHCExsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsb/wAARCAEAAQADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwC5RRRWBoFFFFABRRRQAUUUUAFFFFABRRRQAtFFFABRRRQA6iiimAUUUUALRRRQAlFFFACUUUUAJRRRQAlFFFMAooopAFFFFIAooooAKKKKACiiigAooooAKKKKAFooooAKKKKACiiimAtFFFAC0UUUAFFFFACUUUUAJRRRQAUUUUAJRRRQAUUUUgCiiigAooooAKKKKACiiigAooooAWiiimAUUUUANooooAWiiigB1FFFABRRRQAUUUUAFFFFACUUUUAFFFFADaKKKACiiikAtFFFMAooopAFFFFMAooooAKKKKACiiigBKKKKACiiigBaKKKAFooooAKKKKACiiigAooooAKKKKAGUUUUAFFFFAC0UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAC0UUUgCiiimAUUUUAMooooAKKKKAFooooAKKKKACiiigAooooAKKKKACiiigB1FFFACUUUUAJRRRQAUUUUgFooooAKKKKAFooooAKKKKAG0UUUwCiiigAooooAWiiigAooooAKKKKACiiigAooooAWiiigBKKKKACiiikAUUUUALRRRQAUUUUAFFFFACUUUUAFFFFUAUUUUALRRRSAKKKKACiiigAooooAKKKKACiiigBKKKKACiiigAooooAWiiikAtFFFABRRRQAlFFFACUUUUAOoooqgCiiigAooooAKKKKQDaKKKACiiigBaKKKAFooooAKKKKAG0UUUAJRRRQA6iiikA+iiigAooooAZRRRQA2iiigB9FFFUAUUUUAFFFFACUUUUAJRRRSAKKKKACiiigBaKKKACiiigAooooAWiiigBKKKKAEooooAKKKKQBRRRQAtFFFMAooooAWiiigAooooASiiigBKKKKACiiigAooooAWiiigAooooAWiiigBaKKKAEooooAZRRRQAlFFFABRRRQAtFFFADqKKKACiiigBaKKKAEooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBKKKKAGUUUUANooooAbRRRQBYooooAKKKKAFooooAKKKKACiiigAooooAKKKKACiiigBtFFFABRRRQAlFFFACUUUUANooooAbRRRQA2iiigBKKKKALVFFFABRRRQAtFFFABRRRQAUUUUAFFFFABRRRQAUUUUAJRRRQAUUUUAJRRRQAyiiigCOiiigBtFFFMB1FFFAD6KKKAJaKKKQBRRRQAtFFFABRRRQAUUUUAFFFFABRRRQAlFFFABRRRQAUUUUANooopgMooooAZRRRQAUUUUAPooooAfRRRQA+iiikAUUUUAFFFFABRRRQAUUUUAJRRRQAUUUUAJRRRQAUUUUANooooAZRRRQAlFFFMAooooAdRRRQAUUUUAFFFFAH//2Q==",
                TileFormat.Png,
            };
        }
        [TestMethod]
        [TestCategory("ConvertToFormat")]
        [DynamicData(nameof(GetConvertToFormatTestParameters), DynamicDataSourceType.Method)]
        public void ConvertToFormat(string testTileBytesBase64, TileFormat expectedTileFormat)
        {
            var testTile = new Tile(new Coord(0, 0, 0), Convert.FromBase64String(testTileBytesBase64));
            var resultTile = this._testImageFormatter.ConvertToFormat(testTile, expectedTileFormat);
            var resultFormat = this._testImageFormatter.GetTileFormat(resultTile.GetImageBytes());

            Assert.IsNotNull(resultTile);
            Assert.AreEqual(expectedTileFormat, resultFormat);
        }

        #endregion

        #region GetTileFormat

        public static IEnumerable<object[]> GetTileFormatTestParameters()
        {
            yield return new object[] {
                "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",
                TileFormat.Png,
            };

            yield return new object[] {
                 "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDACAWGBwYFCAcGhwkIiAmMFA0MCwsMGJGSjpQdGZ6eHJmcG6AkLicgIiuim5woNqirr7EztDOfJri8uDI8LjKzsb/2wBDASIkJDAqMF40NF7GhHCExsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsb/wAARCAEAAQADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwC5RRRWBoFFFFABRRRQAUUUUAFFFFABRRRQAtFFFABRRRQA6iiimAUUUUALRRRQAlFFFACUUUUAJRRRQAlFFFMAooopAFFFFIAooooAKKKKACiiigAooooAKKKKAFooooAKKKKACiiimAtFFFAC0UUUAFFFFACUUUUAJRRRQAUUUUAJRRRQAUUUUgCiiigAooooAKKKKACiiigAooooAWiiimAUUUUANooooAWiiigB1FFFABRRRQAUUUUAFFFFACUUUUAFFFFADaKKKACiiikAtFFFMAooopAFFFFMAooooAKKKKACiiigBKKKKACiiigBaKKKAFooooAKKKKACiiigAooooAKKKKAGUUUUAFFFFAC0UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAC0UUUgCiiimAUUUUAMooooAKKKKAFooooAKKKKACiiigAooooAKKKKACiiigB1FFFACUUUUAJRRRQAUUUUgFooooAKKKKAFooooAKKKKAG0UUUwCiiigAooooAWiiigAooooAKKKKACiiigAooooAWiiigBKKKKACiiikAUUUUALRRRQAUUUUAFFFFACUUUUAFFFFUAUUUUALRRRSAKKKKACiiigAooooAKKKKACiiigBKKKKACiiigAooooAWiiikAtFFFABRRRQAlFFFACUUUUAOoooqgCiiigAooooAKKKKQDaKKKACiiigBaKKKAFooooAKKKKAG0UUUAJRRRQA6iiikA+iiigAooooAZRRRQA2iiigB9FFFUAUUUUAFFFFACUUUUAJRRRSAKKKKACiiigBaKKKACiiigAooooAWiiigBKKKKAEooooAKKKKQBRRRQAtFFFMAooooAWiiigAooooASiiigBKKKKACiiigAooooAWiiigAooooAWiiigBaKKKAEooooAZRRRQAlFFFABRRRQAtFFFADqKKKACiiigBaKKKAEooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBKKKKAGUUUUANooooAbRRRQBYooooAKKKKAFooooAKKKKACiiigAooooAKKKKACiiigBtFFFABRRRQAlFFFACUUUUANooooAbRRRQA2iiigBKKKKALVFFFABRRRQAtFFFABRRRQAUUUUAFFFFABRRRQAUUUUAJRRRQAUUUUAJRRRQAyiiigCOiiigBtFFFMB1FFFAD6KKKAJaKKKQBRRRQAtFFFABRRRQAUUUUAFFFFABRRRQAlFFFABRRRQAUUUUANooopgMooooAZRRRQAUUUUAPooooAfRRRQA+iiikAUUUUAFFFFABRRRQAUUUUAJRRRQAUUUUAJRRRQAUUUUANooooAZRRRQAlFFFMAooooAdRRRQAUUUUAFFFFAH//2Q==",
                TileFormat.Jpeg,
            };
        }
        [TestMethod]
        [TestCategory("GetTileFormat")]
        [DynamicData(nameof(GetTileFormatTestParameters), DynamicDataSourceType.Method)]
        public void GetTileFormat(string testTileBytesBase64, TileFormat expectedResultFormat)
        {
            var resultFormat = this._testImageFormatter.GetTileFormat(Convert.FromBase64String(testTileBytesBase64));

            Assert.IsNotNull(resultFormat);
            Assert.AreEqual(expectedResultFormat, resultFormat);
        }

        #endregion
    }
}
